use alloy::primitives::Address;
use foundry_block_explorers::account::{NormalTransaction, TxListParams};
use serde::{Deserialize, Serialize};
use t_lib::{
    log::{Level, instrument},
    share::optional::DefaultOption,
};

use crate::{
    error::Error,
    fetch::{
        Fetch, Param,
        etherscan::{client::Etherscan, model::pagination::Pagination},
    },
};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Params {
    pub address: Address,
    pub start_block: u64,
    pub end_block: u64,
    #[serde(default, flatten)]
    pub pagination: Option<Pagination>,
}

impl Param for Params {
    type Err = Error;
    type Ret = Vec<NormalTransaction>;
}

impl Fetch<Params> for Etherscan {
    type Err = <Params as Param>::Err;
    type Ret = <Params as Param>::Ret;

    #[instrument(level = Level::TRACE, skip_all, err, fields(?params))]
    async fn fetch(&mut self, params: Params) -> Result<Self::Ret, Self::Err> {
        let Params { address, start_block, end_block, pagination } = params;

        let Pagination { page, offset, sort } = DefaultOption::into(pagination);
        let tx_list_params = TxListParams { start_block, end_block, page, offset, sort };
        // TODO: FIX pagination limit
        let txs = self.get_transactions(&address, Some(tx_list_params)).await?;
        Ok(txs)
    }
}

#[cfg(test)]
mod tests {
    use alloy::primitives::address;
    use insta::assert_yaml_snapshot;
    use nill::{Nil, nil};

    use super::*;
    use crate::fetch::etherscan::EtherscanFetch;

    const ADDRESS: Address = address!("0xcf4f5cbc40ab3c8d8b0bfe752f70bf0916c0d938");

    #[tokio::test]
    async fn test_get_transactions() -> Result<Nil, Error> {
        let params = Params {
            address: ADDRESS,
            start_block: 55911167,
            end_block: 56045281,
            pagination: None,
        };
        let txs = params.fetch().await?;

        assert_yaml_snapshot!(
            txs[0],
            { ".confirmations" => "[confirmations]", },
            @r#"
        isError: "0"
        blockNumber: "0x356e2b5"
        timeStamp: "1754017361"
        hash: "0x8ad8001c29dc528395ee6055711ee00025cba5e0f4828396726f6d018565595f"
        nonce: "0x28c"
        blockHash: "0x30cf80bf98f19b7aef3cf07688d69bde9123d1e9065212481deeadbb8338d095"
        transactionIndex: 38
        from: "0xcf4f5cbc40ab3c8d8b0bfe752f70bf0916c0d938"
        to: "0xb300000b72deaeb607a12d5f54773d1c19c7028d"
        value: "0x0"
        gas: "0x5b61a"
        gasPrice: "0x68e7780"
        txReceiptStatus: "1"
        input: "0xe5e8894b0000000000000000000000005efc784d444126ecc05f22c49ff3fbd7d9f4868a000000000000000000000000d715cc968c288740028be20685263f43ed1e4837000000000000000000000000000000000000000000000055a69a1e4227b933cd00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000460ce884c98883ff300000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004049aa903560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d715cc968c288740028be20685263f43ed1e483700000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000460ce884c98883ff30000000000000000000000000000000000000000000000000000019863996bb20000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000055a69a1e4227b933cd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000d715cc968c288740028be20685263f43ed1e48370000000000000000000000000000000000000000000000000000000000000001020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005efc784d444126ecc05f22c49ff3fbd7d9f4868a0000000000000000000000000000000000000000000000000000000000000001000000000000000000002710a424c24c5cbfc377c3b6ae7355c3f30984664b160000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d715cc968c288740028be20685263f43ed1e483700000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000"
        gasUsed: "0x2f552"
        cumulativeGasUsed: "0x806490"
        confirmations: "[confirmations]"
        methodId: "0xe5e8894b"
        functionName: "proxySwapV2(address router,uint256 fromTokenWithFee,uint256 fromAmt,uint256 toTokenWithFee,uint256 minReturnAmt,bytes callData)"
        "#);
        assert_eq!(txs.len(), 52);
        Ok(nil)
    }
}
