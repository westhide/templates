use alloy::primitives::Address;
use foundry_block_explorers::account::{NormalTransaction, TxListParams};
use serde::{Deserialize, Serialize};
use t_lib::{
    log::{Level, instrument},
    share::optional::Optional,
};

use crate::fetch::{
    Fetch, Param,
    etherscan::{
        client::EtherscanClient,
        error::{Error, Result},
        model::pagination::Pagination,
    },
};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Params {
    pub address: Address,
    pub start_block: u64,
    pub end_block: u64,
    #[serde(default, flatten)]
    pub pagination: Option<Pagination>,
}

impl Param for Params {
    type Err = Error;
    type Ret = Vec<NormalTransaction>;
}

impl Fetch<Params> for EtherscanClient {
    type Err = <Params as Param>::Err;
    type Ret = <Params as Param>::Ret;

    #[instrument(level = Level::TRACE, skip_all, err, fields(?params))]
    async fn fetch(&mut self, params: Params) -> Result<Self::Ret, Self::Err> {
        let Params { address, start_block, end_block, pagination } = params;

        let Pagination { page, offset, sort } = Optional::value(pagination);
        let tx_list_params = TxListParams { start_block, end_block, page, offset, sort };
        // TODO: FIX pagination limit
        let txs = self.get_transactions(&address, Some(tx_list_params)).await?;
        Ok(txs)
    }
}

#[cfg(test)]
mod tests {

    use insta::assert_debug_snapshot;
    use nill::{Nil, nil};

    use super::*;
    use crate::fetch::etherscan::EtherscanFetch;

    const ADDRESS: &str = "0xcf4f5cbc40ab3c8d8b0bfe752f70bf0916c0d938";

    #[tokio::test]
    async fn test_get_transactions() -> Result<Nil> {
        let params = Params {
            address: ADDRESS.parse()?,
            start_block: 55911167,
            end_block: 56045281,
            pagination: None,
        };
        let txs = params.fetch().await?;

        assert_debug_snapshot!(txs[0], @r#"
        NormalTransaction {
            is_error: "0",
            block_number: Number(
                56025781,
            ),
            time_stamp: "1754017361",
            hash: Some(
                0x8ad8001c29dc528395ee6055711ee00025cba5e0f4828396726f6d018565595f,
            ),
            nonce: Some(
                652,
            ),
            block_hash: Some(
                22077642663394974646348961379172564804276850560844519770278188777409860915349,
            ),
            transaction_index: Some(
                38,
            ),
            from: Some(
                0xcf4f5cbc40ab3c8d8b0bfe752f70bf0916c0d938,
            ),
            to: Some(
                0xb300000b72deaeb607a12d5f54773d1c19c7028d,
            ),
            value: 0,
            gas: 374298,
            gas_price: Some(
                110000000,
            ),
            tx_receipt_status: "1",
            input: 0xe5e8894b0000000000000000000000005efc784d444126ecc05f22c49ff3fbd7d9f4868a000000000000000000000000d715cc968c288740028be20685263f43ed1e4837000000000000000000000000000000000000000000000055a69a1e4227b933cd00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000460ce884c98883ff300000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004049aa903560000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d715cc968c288740028be20685263f43ed1e483700000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000460ce884c98883ff30000000000000000000000000000000000000000000000000000019863996bb20000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000055a69a1e4227b933cd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000d715cc968c288740028be20685263f43ed1e48370000000000000000000000000000000000000000000000000000000000000001020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005efc784d444126ecc05f22c49ff3fbd7d9f4868a0000000000000000000000000000000000000000000000000000000000000001000000000000000000002710a424c24c5cbfc377c3b6ae7355c3f30984664b160000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d715cc968c288740028be20685263f43ed1e483700000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000,
            contract_address: None,
            gas_used: 193874,
            cumulative_gas_used: 8414352,
            confirmations: 158020,
            method_id: Some(
                0xe5e8894b,
            ),
            function_name: Some(
                "proxySwapV2(address router,uint256 fromTokenWithFee,uint256 fromAmt,uint256 toTokenWithFee,uint256 minReturnAmt,bytes callData)",
            ),
        }
        "#);
        assert_eq!(txs.len(), 52);
        Ok(nil)
    }
}
