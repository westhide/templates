use alloy::{primitives::Bytes, sol};

// https://bscscan.com/address/0xb300000b72deaeb607a12d5f54773d1c19c7028d#code
// https://bscscan.com/address/0xb8bb1ffb166d2536e92749eb1aaf8cac07456281#code
sol! {
    function proxySwapV2(
        address router,
        uint256 fromTokenWithFee,
        uint256 fromAmt,
        uint256 intoTokenWithFee,
        uint256 minReturnAmt,
        bytes calldata callData
    );

    struct BaseExactInRequest {
        address inputToken;
        address outputToken;
        uint256 minOutputAmount;
        uint256 deadline;
    }

    struct RouterPath {
        uint256[] mixAdapters;
        address[] assetTo;
        uint256[] rawData;
        bytes[] extraData;
        address fromToken;
    }

    function swapExactIn(
        uint256 orderId,
        BaseExactInRequest calldata request,
        uint256[] calldata routesAmount,
        RouterPath[][] calldata routes,
        uint256 feeConfig
    );
}

pub type ProxySwapV2 = proxySwapV2Call;

impl ProxySwapV2 {
    pub const METHOD_ID: Bytes = Bytes::from_static(Self::METHOD_ID_BYTES);
    pub const METHOD_ID_BYTES: &[u8] = &[0xE5, 0xE8, 0x89, 0x4B];
}

#[cfg(test)]
mod tests {
    use alloy::{hex, sol_types::SolCall};
    use insta::assert_debug_snapshot;
    use nill::{Nil, nil};

    use super::*;
    use crate::error::Result;

    #[test]
    fn test_proxy_swap_v2() -> Result<Nil> {
        // TxHash: 0xa7b36df50b90298f0193af6eb52b1ac0eaa3bbafb648609fae72109e119dcebf
        let bytes = hex!(
            "0xe5e8894b0000000000000000000000005efc784d444126ecc05f22c49ff3fbd7d9f4868a00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000419a2be1acc270c4cd0000000000000000000000000e7779e698052f8fe56c415c3818fcf89de9ac6d0000000000000000000000000000000000000000000085712782b2d00727c42400000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000004049aa90356000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000e7779e698052f8fe56c415c3818fcf89de9ac6d0000000000000000000000000000000000000000000085712782b2d00727c42400000000000000000000000000000000000000000000000000000198795552ba00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000419a2be1acc270c4cd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000000000001020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005efc784d444126ecc05f22c49ff3fbd7d9f4868a0000000000000000000000000000000000000000000000000000000000000001000000000000000000002710a0c5b17a5be4e4c991e891b757587371d8b0b2f2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000e7779e698052f8fe56c415c3818fcf89de9ac6d000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000"
        );
        let call = proxySwapV2Call::abi_decode(&bytes)?;
        assert_debug_snapshot!(call.router, @"0x5efc784d444126ecc05f22c49ff3fbd7d9f4868a");
        Ok(nil)
    }
}
